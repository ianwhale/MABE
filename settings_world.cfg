% WORLD
  debug = 0                                  # (bool) run world in debug mode (if available)
  groupEvaluation = 0                        # (bool) if true, evaluate population concurrently
  repeats = 3                                # (int) Number of times to test each Genome per generation
  worldType = Berry                          # (string) world to be used, [Berry, NumeralClassifier, Test, IPD, SOF]

% WORLD_BERRY
  boarderEdge = 0                            # (int) edge (may overlap wall) that will be left empty (food0)
  clearOutputs = 0                           # (bool) if true outputs will be cleared on each world update
  fixedStartFacing = -1                      # (int) start facing direction (range 0-7) for organism, -1 = random
  fixedStartXRange = [-1]                    # (string) range for start location for organism (i.e. [x] for a fixed value, [x,y] to place in range), [-1] = random
  fixedStartYRange = [-1]                    # (string) range for start location for organism (i.e. [x] for a fixed value, [x,y] to place in range), [-1] = random
  foodTypes = 4                              # (int) number of types of food
  makeBorderWalls = 0                        # (bool) if true world will have a bounding wall
  mapFileList = []                           # (string) list of worlds in which to evaluate organism. If empty, random world will be created
  mapFileWhichMaps = [random]                # (string) if mapFileList is not empty, this parameter will determine which maps are seen by an organism in one evaluation.
                                             #    [random] select one random map
                                             #    [all] select all maps (from all files)
                                             #    if two values are present the first determines which files to pull maps from, the second which maps from those files
                                             #    the options for the first position (file) are:
                                             #      'all' (pull from all files)
                                             #      '#' (pull from # random files - with possible repeats)
                                             #      'u#' (pull from # unique files)
                                             #    the options for the second position (map) are:
                                             #      'all' (all maps in the file)
                                             #      '#' (# random maps from file - with possible repeats)
                                             #      'u#' (# unique maps from file)
                                             #    example1: [all,u2] = from all files, 2 unique maps
                                             #    example2: [2,1] one map from each two files (might be the same file twice)
  recordFoodList = 0                         # (bool) if true, record list of food eaten
  recordFoodListEatEmpty = 0                 # (bool) if true, foodList will include attempts to eat 0
  recordFoodListNoEat = 0                    # (bool) if true, if true foodList will include no eat (-1)
  replacementDefaultRule = -1                # (int) -1 = random, 0 = no replacement, 1 = replace other (note: Food0, can be replace by Food0)
  replacementFood0 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood1 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood2 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood3 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood4 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood5 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood6 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood7 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  replacementFood8 = -1                      # (int) when this type of food is replaced, replace with value, -1 = use 'replacement' value
  rewardForFood0 = 0.0                       # (double) reward for eating a Food0
  rewardForFood1 = 0.3                       # (double) reward for eating a Food1
  rewardForFood2 = 1.0                       # (double) reward for eating a Food2
  rewardForFood3 = -0.5                       # (double) reward for eating a Food3
  rewardForFood4 = 1.0                       # (double) reward for eating a Food4
  rewardForFood5 = 1.0                       # (double) reward for eating a Food5
  rewardForFood6 = 1.0                       # (double) reward for eating a Food6
  rewardForFood7 = 1.0                       # (double) reward for eating a Food7
  rewardForFood8 = 1.0                       # (double) reward for eating a Food8
  senseDown = 0                              # (bool) if true, Agent can sense what it's standing on
  senseFront = 1                             # (bool) if true, Agent can sense what's in front of it
  senseFrontSides = 1                        # (bool) if true, Agent can sense what's in front to the left and right of it
  senseOther = 0                             # (bool) if true, Agents will be able to sense other agents (if there are other agents).
  senseVisited = 0                           # (bool) organism can sense if any organism has visited here
  senseWalls = 0                             # (bool) if true, Agent can sense Walls
  taskSwitchingCost = 0                    # (double) cost to change food sources
  worldUpdates = 400                         # (int) amount of time a brain is tested
  worldUpdatesBaisedOnInitial = 0.0          # (double) if greater then 0 then worldUpdates will be this value * number of food in world at worldUpdate 0
  worldX = 10                                 # (int) world X size
  worldY = 10                                 # (int) world Y size

% WORLD_BERRY_ADVANCED
  allowMoveAndEat = 0                        # (bool) if true, the brain can move and eat in the same world update
  alwaysEat = 1                              # (bool) if true, brain will only have 2 outputs (0 0 : no action, 1 0 : left, 0 1 : right, 1 1 : move). Organism will always eat if
                                             #    food is present.
  alwaysStartOnFoodOfType = -1               # (int) if -1 organisms are placed randomly. if > -1, all organisms will start on this type of food (must be < 9)
  makeRandomWalls = 0                        # (int) add this many walls to the world
  recordConsumptionRatio = 0                 # (bool) if true, record greater of red/blue+1 or blue/red+1
  relativeScoring = 0                        # (bool) score will be divided by the value of the positively scoring food on the initial map (useful when replacement = 0)
  replacementRatioFood0 = 0                  # (int) Relative likelihood to leave empty space empty
  replacementRatioFood1 = 1                  # (int) Relative likelihood to place Food1
  replacementRatioFood2 = 1                  # (int) Relative likelihood to place Food2
  replacementRatioFood3 = 1                  # (int) Relative likelihood to place Food3
  replacementRatioFood4 = 1                  # (int) Relative likelihood to place Food4
  replacementRatioFood5 = 1                  # (int) Relative likelihood to place Food5
  replacementRatioFood6 = 1                  # (int) Relative likelihood to place Food6
  replacementRatioFood7 = 1                  # (int) Relative likelihood to place Food7
  replacementRatioFood8 = 1                  # (int) Relative likelihood to place Food8
  rewardForMove = 0.0                        # (double) reward for moving
  rewardForTurn = 0.0                        # (double) reward for turning
  rewardSpatialNovelty = 0.0                 # (double) reward added to score every time organism moves on a new location

% WORLD_IPD
  C = 1                                      # (bool) How will Cooperate be represented internally (Defect will = 1 - Cooperate)
  P_payOff = 1.0                             # (double) Punishment Payoff - received when both organisms defect
  R_payOff = 3.0                             # (double) Reward Payoff - received when both organisms cooperate
  S_payOff = 0.0                             # (double) Sucker Payoff - received when an organism cooperates, and their opponent defects
  T_payOff = 5.0                             # (double) Temptation Payoff - received when an organism defects, and their opponent cooperates
  numCompetitors = -1                        # (int) number of each organism will challenge (and also be challenged by).
                                             #    Total matches played will be 2 times this number * population size.
                                             #    If -1, then every organism will play every other organism once.
  randomFirstMove = 0                        # (bool) if true, the first move will not be scored
  roundsMax = 200                            # (int) maximum number of rounds played in a single evaluation
  roundsMin = 100                            # (int) minimum number of rounds played in a single evaluation
  skipFirstMove = 1                          # (bool) if true, the first move will not be scored

% WORLD_NUMERALCLASSIFIER
  WorldUpdates = 10                         # (int) number of world updates brain has to evaluate each value
  dataFileName = World/NumeralClassifierWorld/mnist.train.discrete.28x28-only100 # (string) name of file with numeral data
  retinaType = 3                             # (int) 1 = center only, 2 = 3 across, 3 = 3x3, 4 = 5x5, 5 = 7x7
  testsPreWorldEval = 5                      # (int) number of values each brain attempts to evaluate in a world evaluation

% WORLD_SOF
  scoreMapFilename = World/SOFWorld/scoreMap_20x20_2peaks.txt # (string) name of file containing score map.

% WORLD_TEST
  mode = 0                                   # (int) 0 = bit outputs before adding, 1 = add outputs
  numberOfOutputs = 10                       # (int) number of outputs in this world

